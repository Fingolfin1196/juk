// HAND-EDIT

/*
 * This file was generated by dbusidl2cpp version 0.6
 * Command line was: dbusidl2cpp -m -a playeradaptor -- org.kde.juk.player.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include "playeradaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class PlayerAdaptor
 */

PlayerAdaptor::PlayerAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

PlayerAdaptor::~PlayerAdaptor()
{
    // destructor
}

void PlayerAdaptor::back()
{
    // handle method call org.kde.juk.player.back
    QMetaObject::invokeMethod(parent(), "back");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->back();
}

// HAND-EDIT
QString PlayerAdaptor::currentFile()
{
    return trackProperty("Path");
}

int PlayerAdaptor::currentTime()
{
    // handle method call org.kde.juk.player.currentTime
    int out0;
    QMetaObject::invokeMethod(parent(), "currentTime", Q_RETURN_ARG(int, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->currentTime();
    return out0;
}

void PlayerAdaptor::forward()
{
    // handle method call org.kde.juk.player.forward
    QMetaObject::invokeMethod(parent(), "forward");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->forward();
}

void PlayerAdaptor::mute()
{
    // handle method call org.kde.juk.player.mute
    QMetaObject::invokeMethod(parent(), "mute");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->mute();
}

void PlayerAdaptor::pause()
{
    // handle method call org.kde.juk.player.pause
    QMetaObject::invokeMethod(parent(), "pause");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->pause();
}

bool PlayerAdaptor::paused()
{
    // handle method call org.kde.juk.player.paused
    bool out0;
    QMetaObject::invokeMethod(parent(), "paused", Q_RETURN_ARG(bool, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->paused();
    return out0;
}

void PlayerAdaptor::play(const QString &file)
{
    // handle method call org.kde.juk.player.play
    QMetaObject::invokeMethod(parent(), "play", Q_ARG(QString, file));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->play(file);
}

void PlayerAdaptor::play()
{
    // handle method call org.kde.juk.player.play
    QMetaObject::invokeMethod(parent(), "play");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->play();
}

void PlayerAdaptor::playPause()
{
    // handle method call org.kde.juk.player.playPause
    QMetaObject::invokeMethod(parent(), "playPause");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->playPause();
}

bool PlayerAdaptor::playing()
{
    // handle method call org.kde.juk.player.playing
    bool out0;
    QMetaObject::invokeMethod(parent(), "playing", Q_RETURN_ARG(bool, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->playing();
    return out0;
}

QString PlayerAdaptor::playingString()
{
    // handle method call org.kde.juk.player.playingString
    QString out0;
    QMetaObject::invokeMethod(parent(), "playingString", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->playingString();
    return out0;
}

QString PlayerAdaptor::randomPlayMode()
{
    // handle method call org.kde.juk.player.randomPlayMode
    QString out0;
    QMetaObject::invokeMethod(parent(), "randomPlayMode", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->randomPlayMode();
    return out0;
}

void PlayerAdaptor::seek(int time)
{
    // handle method call org.kde.juk.player.seek
    QMetaObject::invokeMethod(parent(), "seek", Q_ARG(int, time));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->seek(time);
}

void PlayerAdaptor::seekBack()
{
    // handle method call org.kde.juk.player.seekBack
    QMetaObject::invokeMethod(parent(), "seekBack");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->seekBack();
}

void PlayerAdaptor::seekForward()
{
    // handle method call org.kde.juk.player.seekForward
    QMetaObject::invokeMethod(parent(), "seekForward");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->seekForward();
}

void PlayerAdaptor::setRandomPlayMode(int randomMode)
{
    // handle method call org.kde.juk.player.setRandomPlayMode
    QMetaObject::invokeMethod(parent(), "setRandomPlayMode", Q_ARG(int, randomMode));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setRandomPlayMode(randomMode);
}

void PlayerAdaptor::setVolume(int volume)
{
    // handle method call org.kde.juk.player.setVolume
    QMetaObject::invokeMethod(parent(), "setVolume", Q_ARG(int, volume));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setVolume(volume);
}

int PlayerAdaptor::status()
{
    // handle method call org.kde.juk.player.status
    int out0;
    QMetaObject::invokeMethod(parent(), "status", Q_RETURN_ARG(int, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->status();
    return out0;
}

void PlayerAdaptor::stop()
{
    // handle method call org.kde.juk.player.stop
    QMetaObject::invokeMethod(parent(), "stop");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->stop();
}

int PlayerAdaptor::totalTime()
{
    // handle method call org.kde.juk.player.totalTime
    int out0;
    QMetaObject::invokeMethod(parent(), "totalTime", Q_RETURN_ARG(int, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->totalTime();
    return out0;
}

QStringList PlayerAdaptor::trackProperties()
{
    // handle method call org.kde.juk.player.trackProperties
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "trackProperties", Q_RETURN_ARG(QStringList, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->trackProperties();
    return out0;
}

double PlayerAdaptor::volume()
{
    // handle method call org.kde.juk.player.volume
    double out0;
    QMetaObject::invokeMethod(parent(), "volume", Q_RETURN_ARG(double, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->volume();
    return out0;
}

void PlayerAdaptor::volumeDown()
{
    // handle method call org.kde.juk.player.volumeDown
    QMetaObject::invokeMethod(parent(), "volumeDown");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->volumeDown();
}

void PlayerAdaptor::volumeUp()
{
    // handle method call org.kde.juk.player.volumeUp
    QMetaObject::invokeMethod(parent(), "volumeUp");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->volumeUp();
}


#include "playeradaptor.moc"
